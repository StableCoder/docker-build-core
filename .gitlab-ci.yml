##########
# Global #
##########

stages:
  - Release Images
  - Tagged Images
  - Post-Pipeline

######################
# Image Builds Stage #
######################

.build_image: &build_template
  image: docker:dind
  except:
    - master
  tags:
    - linux
    - docker-builder
  script:
    - docker build -t stabletec/build-core:${OS}${RELEASE}-gcc-${CI_COMMIT_REF_NAME} -f ${OS}/${OS}${RELEASE}/gcc.dockerfile ${OS}/${OS}${RELEASE}
    - docker build -t stabletec/build-core:${OS}${RELEASE}-clang-${CI_COMMIT_REF_NAME} -f ${OS}/${OS}${RELEASE}/clang.dockerfile ${OS}/${OS}${RELEASE}

.tagged_build_image: &tagged_build_template
  image: docker:dind
  except:
    - master
  tags:
    - linux
    - docker-builder
  script:
    - ./tag_helper.sh
    - docker build -t stabletec/build-core:${OS}${RELEASE}-gcc-${CI_COMMIT_REF_NAME} -f ${OS}/${OS}${RELEASE}/gcc.dockerfile ${OS}/${OS}${RELEASE}
    - docker build -t stabletec/build-core:${OS}${RELEASE}-clang-${CI_COMMIT_REF_NAME} -f ${OS}/${OS}${RELEASE}/clang.dockerfile ${OS}/${OS}${RELEASE}

Fedora 26 Build:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 26
  <<: *build_template

Fedora 27 Build:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 27
  <<: *build_template

Fedora 28 Build:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 28
  <<: *build_template

Fedora Latest Build:
  stage: Tagged Images
  variables:
    OS: fedora
    RELEASE: ''
  <<: *tagged_build_template

CentOS 7 Build:
  stage: Release Images
  variables:
    OS: centos
    RELEASE: 7
  <<: *build_template

CentOS Latest Build:
  stage: Tagged Images
  variables:
    OS: centos
    RELEASE: ''
  <<: *tagged_build_template

Debian 9 Build:
  stage: Release Images
  variables:
    OS: debian
    RELEASE: 9
  <<: *build_template

Debian 10 Build:
  stage: Release Images
  variables:
    OS: debian
    RELEASE: 10
  <<: *build_template

Debian Latest Build:
  stage: Tagged Images
  variables:
    OS: debian
    RELEASE: ''
  <<: *tagged_build_template

Debian Testing Build:
  stage: Tagged Images
  variables:
    OS: debian
    RELEASE: testing
  <<: *tagged_build_template

Ubuntu 16.04 Build:
  stage: Release Images
  variables:
    OS: ubuntu
    RELEASE: '16.04'
  <<: *build_template

Ubuntu 18.04 Build:
  stage: Release Images
  variables:
    OS: ubuntu
    RELEASE: '18.04'
  <<: *build_template

Ubuntu Latest Build:
  stage: Tagged Images
  variables:
    OS: ubuntu
    RELEASE: ''
  <<: *tagged_build_template

Ubuntu Devel Build:
  stage: Tagged Images
  variables:
    OS: ubuntu
    RELEASE: devel
  <<: *tagged_build_template

.Windows Build:
  stage: Release Images
  variables:
    OS: windows
    RELEASE: ''
  except:
    - master
  tags:
    - windows
    - docker-builder
  script:
    - docker build -t stabletec/build-core:%OS%%RELEASE%-msvc2017-%CI_COMMIT_REF_NAME% -m 2GB -f windows/msvc2017.dockerfile windows

#######################
# Image Uploads Stage #
#######################

.upload_image: &upload_template
  image: docker:dind
  only:
    - master
  tags:
    - linux
    - docker-builder
  before_script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
  script:
    - docker build ${DOCKER_NO_CACHE} -t stabletec/build-core:${OS}${RELEASE}-gcc -f ${OS}/${OS}${RELEASE}/gcc.dockerfile ${OS}/${OS}${RELEASE}
    - docker build -t stabletec/build-core:${OS}${RELEASE}-clang -f ${OS}/${OS}${RELEASE}/clang.dockerfile ${OS}/${OS}${RELEASE}
    - docker push stabletec/build-core:${OS}${RELEASE}-gcc
    - docker push stabletec/build-core:${OS}${RELEASE}-clang
  after_script:
    - docker logout

.tagged_upload_image: &tagged_upload_template
  image: docker:dind
  only:
    - master
  tags:
    - linux
    - docker-builder
  before_script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
  script:
    - ./tag_helper.sh
    - docker build -t stabletec/build-core:${OS}${RELEASE}-gcc -f ${OS}/${OS}${RELEASE}/gcc.dockerfile ${OS}/${OS}${RELEASE}
    - docker build -t stabletec/build-core:${OS}${RELEASE}-clang -f ${OS}/${OS}${RELEASE}/clang.dockerfile ${OS}/${OS}${RELEASE}
    - docker push stabletec/build-core:${OS}${RELEASE}-gcc
    - docker push stabletec/build-core:${OS}${RELEASE}-clang
  after_script:
    - docker logout

Fedora 26 Upload:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 26
  <<: *upload_template

Fedora 27 Upload:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 27
  <<: *upload_template

Fedora 28 Upload:
  stage: Release Images
  variables:
    OS: fedora
    RELEASE: 28
  <<: *upload_template

Fedora Latest Upload:
  stage: Tagged Images
  variables:
    OS: fedora
    RELEASE: ''
  <<: *tagged_upload_template

CentOS 7 Upload:
  stage: Release Images
  variables:
    OS: centos
    RELEASE: 7
  <<: *upload_template

CentOS Latest Upload:
  stage: Tagged Images
  variables:
    OS: centos
    RELEASE: ''
  <<: *tagged_upload_template

Debian 9 Upload:
  stage: Release Images
  variables:
    OS: debian
    RELEASE: 9
  <<: *upload_template

Debian 10 Upload:
  stage: Release Images
  variables:
    OS: debian
    RELEASE: 10
  <<: *upload_template

Debian Latest Upload:
  stage: Tagged Images
  variables:
    OS: debian
    RELEASE: ''
  <<: *upload_template

Debian Testing Upload:
  stage: Tagged Images
  variables:
    OS: debian
    RELEASE: testing
  <<: *tagged_upload_template

Ubuntu 16.04 Upload:
  stage: Release Images
  variables:
    OS: ubuntu
    RELEASE: '16.04'
  <<: *upload_template

Ubuntu 18.04 Upload:
  stage: Release Images
  variables:
    OS: ubuntu
    RELEASE: '18.04'
  <<: *upload_template

Ubuntu Latest Upload:
  stage: Tagged Images
  variables:
    OS: ubuntu
    RELEASE: ''
  <<: *tagged_upload_template

Ubuntu Devel Upload:
  stage: Tagged Images
  variables:
    OS: ubuntu
    RELEASE: devel
  <<: *tagged_upload_template

.Windows Upload:
  stage: Release Images
  variables:
    OS: windows
    RELEASE: ''
  only:
    - master
  tags:
    - windows
    - docker-builder
  before_script:
    - docker login -u %DOCKER_USER% -p %DOCKER_PASSWORD%
  script:
    - docker build %DOCKER_NO_CACHE% -t stabletec/build-core:%OS%%RELEASE%-msvc2017 -m 2GB -f windows/msvc2017.dockerfile windows
    - docker push stabletec/build-core:%OS%%RELEASE%-msvc2017
  after_script:
    - docker logout

#######################
# Post-Pipeline Stage #
#######################

Pipeline Triggers:
  stage: Post-Pipeline
  image: stabletec/alpine:curl
  only:
    - master
  tags:
    - linux
    - docker
  script:
    - echo "Triggering build-stec (13)"
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=master https://git.stabletec.com/api/v4/projects/13/trigger/pipeline